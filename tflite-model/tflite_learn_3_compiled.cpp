/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.02.2025 09:31:26

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 32800;
#else
constexpr int kTensorArenaSize = 31776;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,3920 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data1[8] = { -0.10461395233869553, -0.11612535268068314, -0.026654133573174477, 0.12524442374706268, -0.035905778408050537, -0.16460840404033661, -0.092942588031291962, 0.084094926714897156, };
const TfArray<1, int> tensor_dimension1 = { 1, { 8 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data2[16] = { -0.07443208247423172, 0.13294331729412079, 0.14613401889801025, 0.17743963003158569, -0.03753221407532692, -0.057480242103338242, 0.16053782403469086, -0.089325271546840668, 0.14218896627426147, 0.084914959967136383, 0.23310704529285431, 0.2089727371931076, -0.068475514650344849, -0.06130947545170784, -0.076780155301094055, 0.188095822930336, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 98, 40, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 98, 1, 8, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 49, 8, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 49, 1, 16, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data7[8*1*3*40] = { 
  /* [0][0][][] */ 0.012436165474355221,0.15072338283061981,0.039704389870166779,0.077846735715866089,-0.16330300271511078,-0.023838464170694351,0.14185330271720886,-0.04941168799996376,-0.16748563945293427,-0.10503334552049637,0.079649247229099274,-0.13751199841499329,0.12439274042844772,-0.19114205241203308,-0.14187178015708923,0.097365960478782654,-0.05249563604593277,-0.04666740819811821,-0.027185840532183647,-0.19241902232170105,0.086511701345443726,0.0020242675673216581,0.056653670966625214,0.11820276826620102,0.16517193615436554,-0.0042881378903985023,0.015513157472014427,-0.17037603259086609,0.073106735944747925,-0.163755863904953,-0.1578952968120575,0.13991720974445343,0.10024026036262512,-0.079292468726634979,0.06666400283575058,-0.0025254806969314814,0.029194552451372147,-0.1099172905087471,0.14468547701835632,0.18220330774784088, 0.058015294373035431,0.13174913823604584,-0.1048399806022644,0.1873554140329361,-0.02037079818546772,-0.057950370013713837,0.23904362320899963,0.13166569173336029,-0.083742246031761169,-0.091599762439727783,0.22522513568401337,0.24883115291595459,-0.1919066458940506,0.16327400505542755,0.16987541317939758,0.23011204600334167,0.18554897606372833,0.1257016658782959,0.016560908406972885,0.15139965713024139,-0.14644491672515869,0.17421142756938934,0.088036298751831055,0.03487304225564003,0.017661146819591522,-0.076755434274673462,0.16587482392787933,0.00054455455392599106,0.20429360866546631,-0.052612863481044769,-0.089705668389797211,0.2143133133649826,-0.064427003264427185,-0.12437685579061508,-0.082526609301567078,0.1310441792011261,0.13379421830177307,0.069114670157432556,-0.071691982448101044,0.097207210958003998, 0.13503071665763855,0.013409793376922607,0.20493529736995697,-0.097793027758598328,0.23430544137954712,-0.14107033610343933,-0.11787790805101395,-0.0073810773901641369,-0.13348087668418884,0.091059550642967224,-0.085642270743846893,-0.14363159239292145,0.010884257964789867,-0.23513340950012207,-0.11611849814653397,0.03181895986199379,-0.13113760948181152,-0.079770654439926147,0.12682440876960754,-0.11329125612974167,0.14890621602535248,-0.096811085939407349,0.014656358398497105,0.079135864973068237,0.089962810277938843,-0.12730477750301361,-0.15982629358768463,0.044247515499591827,-0.030371552333235741,-0.037179619073867798,-0.15942616760730743,-0.13664481043815613,0.047907989472150803,-0.10657930374145508,-0.081168688833713531,-0.03074367344379425,-0.026136672124266624,0.12971484661102295,0.13061738014221191,0.17109344899654388, 
  /* [1][0][][] */ -0.22948428988456726,-0.1682247519493103,0.024340858682990074,0.21383652091026306,-0.084781937301158905,0.2163824737071991,-0.11978959292173386,0.234236940741539,0.0051386812701821327,0.0028280483093112707,-0.053862981498241425,-0.076617851853370667,0.14572517573833466,-0.1615305095911026,0.19120150804519653,0.10995472222566605,-0.20421263575553894,-0.11705562472343445,0.16313081979751587,0.21878021955490112,0.12862119078636169,-0.14349247515201569,0.063210748136043549,0.0092865675687789917,0.074510090053081512,-0.10864794254302979,-0.15259034931659698,-0.080546550452709198,-0.040959514677524567,0.16511137783527374,-0.013652550987899303,-0.19542595744132996,-0.047293428331613541,0.099767297506332397,0.057888433337211609,0.11951837688684464,-0.088584758341312408,-0.16420198976993561,-0.019849980250000954,-0.04984014481306076, 0.13325804471969604,-0.016342591494321823,-0.070407427847385406,0.12870770692825317,0.082845285534858704,0.25331661105155945,0.1925891786813736,0.23829783499240875,0.0095593491569161415,-0.082846194505691528,-0.039556853473186493,-0.015278184786438942,0.078236252069473267,-0.19685271382331848,-0.19438064098358154,0.19334770739078522,0.011681271716952324,-0.2183544784784317,-0.16948844492435455,-0.077538922429084778,0.12665408849716187,0.17991620302200317,-0.14697067439556122,-0.09169035404920578,-0.20407043397426605,-0.014219615608453751,0.032518025487661362,-0.14654335379600525,0.0098485685884952545,0.26230564713478088,-0.12253962457180023,-0.014289031736552715,0.0015796177322044969,0.1997624933719635,0.0072799632325768471,-0.058392826467752457,-0.059156514704227448,-0.04850991815328598,-0.043521374464035034,-0.1136099174618721, 0.12914346158504486,-0.14931714534759521,0.070049159228801727,-0.060244757682085037,-0.076480314135551453,0.18373282253742218,0.18867532908916473,0.070838116109371185,-0.17814925312995911,0.058958455920219421,-0.16451939940452576,0.17721416056156158,0.17520852386951447,-0.13470233976840973,-0.035997677594423294,0.10420000553131104,-0.036555737257003784,0.11306559294462204,0.14755381643772125,-0.045571058988571167,-0.039855167269706726,0.022548863664269447,-0.19577944278717041,0.053483311086893082,0.12832030653953552,0.23827166855335236,-0.067445509135723114,0.21190683543682098,-0.017797846347093582,-0.032807402312755585,0.083186380565166473,-0.066055871546268463,0.10162708163261414,-0.18972636759281158,-0.088682815432548523,0.13850909471511841,0.19596070051193237,0.010204188525676727,-0.15359944105148315,0.22511404752731323, 
  /* [2][0][][] */ 0.11951911449432373,0.1823018491268158,-0.17705969512462616,-0.063342295587062836,-0.17713560163974762,-0.18547497689723969,0.078635275363922119,0.097943484783172607,-0.11847949028015137,0.030735911801457405,0.075404360890388489,-0.17290972173213959,0.085523054003715515,-0.20993170142173767,-0.13429033756256104,0.10625113546848297,0.10294914990663528,-0.14171534776687622,0.13386639952659607,0.047144431620836258,0.16968850791454315,-0.028579054400324821,-0.034652404487133026,0.0032622853759676218,0.057751312851905823,-0.16557013988494873,-0.16705030202865601,-0.20275075733661652,-0.026236366480588913,-0.21224573254585266,-0.16103588044643402,0.038607928901910782,-0.18705685436725616,0.10095591098070145,0.18466053903102875,-0.12672287225723267,0.083562135696411133,-0.16384787857532501,-0.041063781827688217,-0.091365732252597809, 0.054331384599208832,-0.015478662215173244,0.0038120029494166374,-0.1117062047123909,0.012764373794198036,-0.010142263025045395,0.058845266699790955,-0.1182001456618309,0.14364610612392426,-0.17330846190452576,0.19347138702869415,-0.17790459096431732,-0.11657669395208359,0.022850764915347099,0.18626950681209564,0.10001001507043839,-0.1969553530216217,-0.11096905916929245,0.1301359087228775,0.13075374066829681,0.0050010690465569496,0.15834106504917145,-0.10345260798931122,-0.029462670907378197,-0.11947362124919891,0.18019349873065948,-0.10893780738115311,-0.015929460525512695,-0.16811200976371765,-0.17843805253505707,-0.10640520602464676,0.13706515729427338,-0.18586647510528564,0.048906866461038589,-0.066450051963329315,-0.10155165940523148,-0.20093557238578796,0.086086101830005646,-0.18622277677059174,-0.1171841099858284, 0.093735724687576294,-0.1684110015630722,-0.13508985936641693,-0.03137332946062088,0.11628127843141556,-0.05094611644744873,0.18941004574298859,0.18935801088809967,0.10912108421325684,-0.14291146397590637,-0.17982618510723114,-0.064556032419204712,0.045035678893327713,0.071817852556705475,0.034584548324346542,0.10735394805669785,-0.16813214123249054,-0.1589462012052536,0.19956688582897186,-0.20367395877838135,0.083532176911830902,0.072954721748828888,-0.15658833086490631,0.035608414560556412,0.15893800556659698,-0.19861739873886108,-0.0009106774814426899,-0.12939831614494324,0.0030104562174528837,0.12198786437511444,0.065775588154792786,-0.073303252458572388,-0.001000167103484273,-0.18058733642101288,0.11460946500301361,-0.10406845062971115,0.0063961916603147984,0.19502651691436768,-0.10965269804000854,-0.13810093700885773, 
  /* [3][0][][] */ -0.17272201180458069,-0.062451105564832687,-0.030167393386363983,-0.22240374982357025,0.19780027866363525,-0.13262926042079926,0.15408076345920563,-0.025346891954541206,0.1697080135345459,-0.19235554337501526,-0.04019976407289505,-0.17258931696414948,-0.03437383845448494,0.057752575725317001,0.01918862946331501,-0.033509787172079086,0.1966947466135025,0.030385926365852356,0.051384564489126205,0.035977356135845184,0.099150031805038452,0.11048246175050735,0.15334406495094299,0.15637595951557159,0.034370310604572296,0.1774524599313736,0.18711365759372711,-0.17715346813201904,0.17031140625476837,0.095455706119537354,0.082511015236377716,0.11929154396057129,0.13044436275959015,0.079519212245941162,0.11602386087179184,0.07835765928030014,-0.056547205895185471,0.0087941614910960197,-0.209133580327034,0.1609480232000351, -0.16386206448078156,-0.12681379914283752,-0.025239301845431328,-0.12806400656700134,0.11394116282463074,0.047879684716463089,0.16334016621112823,-0.13731867074966431,0.17891509830951691,0.11106067895889282,-0.14440490305423737,-0.058281756937503815,-0.076200254261493683,-0.12960620224475861,0.15400704741477966,-0.14286725223064423,0.1779358983039856,0.14319510757923126,-0.020853128284215927,0.089361280202865601,0.11207819730043411,0.040007982403039932,-0.013884233310818672,0.17900554835796356,-0.013180085457861423,-0.12953296303749084,0.14234660565853119,-0.14100092649459839,0.044292956590652466,-0.063694968819618225,0.1606447696685791,0.20014418661594391,0.068101830780506134,-0.02789018489420414,-0.09452790766954422,-0.076302759349346161,-0.0014664367772638798,-0.13457244634628296,0.18529023230075836,-0.06738976389169693, 0.16449867188930511,-0.033537030220031738,0.15170736610889435,-0.19710369408130646,0.12508803606033325,0.098984606564044952,0.031500071287155151,-0.015400528907775879,-0.20406635105609894,0.027609393000602722,0.18642589449882507,-0.14395138621330261,-0.19086650013923645,0.048811223357915878,-0.194874107837677,0.027782995253801346,0.034431524574756622,0.0023744839709252119,-0.079148121178150177,0.18911860883235931,-0.17225891351699829,0.072411417961120605,-0.12784792482852936,0.042435821145772934,-0.10932207852602005,0.0093816127628087997,0.18180185556411743,0.04753560945391655,0.18975959718227386,-0.13320092856884003,0.19131092727184296,-0.10506214946508408,-0.0030180388130247593,-0.016464255750179291,-0.11109793931245804,0.0087986709550023079,0.065666787326335907,-0.1735650897026062,-0.16552788019180298,-0.047544609755277634, 
  /* [4][0][][] */ 0.14775751531124115,-0.11823214590549469,-0.038258049637079239,0.18365678191184998,-0.11772194504737854,0.024105861783027649,-0.0061634448356926441,0.18186666071414948,-0.02548208087682724,-0.0056178541854023933,-0.1850670725107193,0.13142095506191254,0.11759531497955322,0.14499053359031677,-0.076093032956123352,0.17917892336845398,-0.12189652025699615,-0.17124573886394501,-0.16167294979095459,-0.14799655973911285,-0.087880797684192657,-0.18007104098796844,-0.15125063061714172,-0.046769507229328156,-0.1750519871711731,-0.040038540959358215,-0.027782153338193893,0.049202345311641693,0.14231644570827484,-0.041931279003620148,-0.15532614290714264,0.063328534364700317,-0.13516652584075928,-0.061767552047967911,0.10393121838569641,-0.1783030778169632,-0.051468789577484131,0.17549780011177063,-0.10758370906114578,0.10333136469125748, 0.10386594384908676,0.0025446317158639431,0.13843934237957001,-0.10097122937440872,-0.094450592994689941,-0.028039639815688133,0.15762296319007874,-0.081528313457965851,0.045588206499814987,-0.061282757669687271,-0.052534420043230057,0.11235287040472031,-0.049937166273593903,0.13925041258335114,-0.13999281823635101,-0.045817695558071136,-0.13876856863498688,0.01176777295768261,0.0588858462870121,-0.094592653214931488,-0.078890122473239899,0.10004019737243652,0.11385691165924072,0.1089843288064003,-0.060811229050159454,0.13389576971530914,0.0025637249927967787,-0.11667519807815552,0.00035545157152228057,0.15076854825019836,-0.20276114344596863,0.16103021800518036,-0.19242316484451294,-0.16362892091274261,0.13354030251502991,0.093427829444408417,-0.094737045466899872,0.041047398000955582,-0.19501051306724548,0.00024173941346816719, 0.15316934883594513,-0.22422581911087036,-0.19959983229637146,-0.03621479868888855,-0.15167093276977539,-0.093214482069015503,0.096830934286117554,0.060371823608875275,-0.083821401000022888,-0.1340683251619339,-0.079403534531593323,0.13454186916351318,0.11932139098644257,0.14509591460227966,-0.18258550763130188,0.02530558779835701,-0.18955916166305542,-0.13752162456512451,0.011433045379817486,-0.0090999603271484375,-0.0066204490140080452,-0.037560615688562393,-0.031170632690191269,-0.11754411458969116,-0.04361734539270401,-0.18494291603565216,-0.17140887677669525,-0.078528575599193573,-0.093484275043010712,0.13642121851444244,0.096694178879261017,-0.21198369562625885,0.14756476879119873,0.037780854851007462,-0.17434646189212799,0.12269903719425201,0.16191786527633667,0.15785731375217438,-0.047954712063074112,-0.20459160208702087, 
  /* [5][0][][] */ -0.096695072948932648,0.026962311938405037,0.01369940023869276,0.11810339987277985,0.18344499170780182,0.083463884890079498,-0.062919475138187408,0.083545200526714325,-0.02749333344399929,0.12859088182449341,-0.079709693789482117,0.23629145324230194,0.0039946404285728931,0.090750135481357574,-0.07947598397731781,0.039023865014314651,-0.22065769135951996,0.0022280793637037277,-0.059312824159860611,0.16861487925052643,-0.079612761735916138,-0.044477954506874084,0.1547262966632843,-0.2750227153301239,0.0029653494711965322,-0.18996910750865936,0.036512024700641632,0.068398244678974152,-0.10424790531396866,0.25174200534820557,-0.24699382483959198,0.18372051417827606,0.056024424731731415,-0.053312238305807114,0.13637848198413849,0.045893251895904541,-0.006934258621186018,-0.13510647416114807,0.18088398873806,0.0056572258472442627, -0.21650345623493195,-0.2164645791053772,0.12563775479793549,0.14505423605442047,0.13969956338405609,-0.012362437322735786,-0.11433419585227966,-0.06035885214805603,-0.1476852148771286,-0.12858366966247559,-0.16051125526428223,-0.1223856508731842,-0.031196266412734985,0.11664138734340668,-0.10383409261703491,0.032694630324840546,-0.032463133335113525,-0.066036142408847809,0.16095262765884399,0.22012132406234741,0.19527509808540344,-0.089021004736423492,0.078899383544921875,0.12699177861213684,-0.12023457884788513,0.058141384273767471,-0.13362237811088562,0.14769305288791656,0.1205880418419838,0.11940411478281021,-0.12260022014379501,-0.020085420459508896,-0.11209762096405029,0.12620064616203308,-0.13838568329811096,-0.0025538101326674223,0.10201824456453323,0.18101315200328827,-0.036639031022787094,-0.07112409919500351, 0.10526547580957413,-0.17092990875244141,0.22124943137168884,0.020550919696688652,0.13407887518405914,0.092753484845161438,0.017755165696144104,-0.0088613247498869896,0.054889589548110962,0.19244076311588287,0.13631464540958405,0.12965996563434601,-0.043548189103603363,0.12809836864471436,-0.15128083527088165,0.11963378638029099,0.1509806215763092,-0.14116622507572174,-0.02048516646027565,-0.17855547368526459,0.17540422081947327,0.17455694079399109,-0.13108247518539429,0.055469315499067307,-0.036945510655641556,-0.11097926646471024,0.19435828924179077,0.13116495311260223,0.084755279123783112,0.004267639946192503,-0.0049619600176811218,0.17584480345249176,-0.024463249370455742,-0.20351642370223999,-0.13713839650154114,-0.16309581696987152,0.029504541307687759,-0.17027761042118073,0.08726327121257782,0.27224534749984741, 
  /* [6][0][][] */ 0.091850101947784424,0.20800679922103882,0.0058454112149775028,0.079672709107398987,0.010058660060167313,-7.3867267929017544e-05,-0.038090139627456665,-0.061773434281349182,-0.16571956872940063,-0.1692882776260376,-0.09596174955368042,0.083950251340866089,-0.13831332325935364,-0.11339125782251358,0.025612747296690941,-0.047626927495002747,-0.11785736680030823,0.15571692585945129,0.019219307228922844,-0.0046341689303517342,-0.011126790195703506,0.089401006698608398,-0.012313451617956161,0.061050847172737122,-0.070629023015499115,0.0061029791831970215,0.20885998010635376,0.035991881042718887,0.086997188627719879,-0.044257327914237976,0.01088385097682476,-0.15994744002819061,0.12290644645690918,-0.18348908424377441,-0.19962023198604584,0.07493726909160614,-0.21978695690631866,0.09703267365694046,-0.14348062872886658,-0.097733110189437866, -0.076777808368206024,-0.12905777990818024,0.16474077105522156,0.044520046561956406,-0.058746788650751114,0.26468852162361145,0.18021346628665924,0.15955938398838043,0.087482154369354248,0.12135042250156403,-0.044691652059555054,0.27110496163368225,-0.16668632626533508,0.11553265899419785,0.20056773722171783,-0.063837893307209015,-0.083401605486869812,-0.15729957818984985,0.15895074605941772,0.2229243665933609,-0.030072011053562164,-0.19029955565929413,-0.04625590518116951,-0.011805270798504353,-0.16300606727600098,0.22168637812137604,-0.010663840919733047,0.11431318521499634,-0.017476016655564308,-0.012877140194177628,0.17115777730941772,0.1815202385187149,-0.11479874700307846,0.12385109066963196,-0.19106337428092957,0.14439564943313599,0.19142501056194305,0.075962089002132416,-0.16194175183773041,-0.092555411159992218, 0.025877043604850769,-0.023256780579686165,-0.066290520131587982,0.034946363419294357,-0.086400695145130157,-0.051713898777961731,0.074032515287399292,0.016604522243142128,0.20490032434463501,0.18688923120498657,-0.16605196893215179,-0.095171935856342316,-0.008394402451813221,-0.15380142629146576,-0.21332225203514099,-0.15943191945552826,0.10973069816827774,-0.23072780668735504,-0.020522145554423332,-0.01966630294919014,0.040086444467306137,-0.26746019721031189,0.053601700812578201,-0.12051685899496078,0.040869172662496567,-0.082853205502033234,-0.26205143332481384,-0.081290498375892639,-0.072373785078525543,0.070748664438724518,-0.12843813002109528,-0.081669338047504425,-0.036297842860221863,0.057875461876392365,-0.17742982506752014,0.20000395178794861,-0.12943917512893677,-0.28248488903045654,-0.1914149671792984,-0.012596046552062035, 
  /* [7][0][][] */ 0.23738615214824677,0.086755573749542236,0.082430116832256317,0.045317091047763824,0.022133193910121918,0.043956220149993896,-0.16337974369525909,0.12581765651702881,0.0045616850256919861,-0.033457901328802109,0.23937717080116272,-0.14769825339317322,0.15113283693790436,-0.14668051898479462,-0.0045879120007157326,0.05291416123509407,0.0056195072829723358,0.25642639398574829,-0.018075956031680107,0.017200635746121407,-0.044906996190547943,0.10799525678157806,-0.1516219824552536,0.0060324990190565586,0.1333296149969101,-0.08154798299074173,-0.049950920045375824,0.17841492593288422,0.17799527943134308,0.087676115334033966,-0.0099706575274467468,-0.10418339818716049,0.12015905976295471,0.15855036675930023,-0.031584829092025757,-0.087193123996257782,0.045388292521238327,-0.046870436519384384,0.09689699113368988,-0.16187615692615509, 0.023819422349333763,0.11561219394207001,-0.13260668516159058,-0.10604586452245712,-0.30030497908592224,-0.15779970586299896,0.050046328455209732,0.11904794722795486,0.069665074348449707,0.1189274787902832,0.22925201058387756,-0.15186296403408051,0.11991166323423386,-0.0056260628625750542,-0.13077712059020996,-0.095348671078681946,-0.11589711904525757,-0.00062488141702488065,0.082095183432102203,-0.10254423320293427,-0.01226140558719635,0.077130123972892761,0.1362549364566803,0.11930730938911438,0.0020577190443873405,-0.076883755624294281,-0.11047744005918503,0.1559874564409256,0.089233733713626862,-0.13353161513805389,-0.11151882261037827,-0.022492732852697372,0.13404150307178497,0.073518402874469757,0.13343486189842224,0.09607841819524765,0.024136580526828766,0.085843570530414581,-0.010489870794117451,-0.036542933434247971, 0.13987278938293457,0.020721390843391418,-0.11526308208703995,-0.10849710553884506,-0.25447243452072144,-0.09285503625869751,-0.034462358802556992,0.016305658966302872,0.028739970177412033,0.14428295195102692,0.022109353914856911,0.011973544023931026,-0.13928177952766418,0.10516125708818436,0.085356727242469788,0.12497342377901077,0.093123868107795715,0.17325510084629059,0.1427445262670517,0.017276616767048836,-0.012222861871123314,0.11600623279809952,0.14288496971130371,0.17380432784557343,-0.16243214905261993,0.18093851208686829,0.037530668079853058,0.16637089848518372,-0.054310884326696396,0.077888518571853638,0.095974460244178772,0.1412060409784317,-0.16534203290939331,-0.091133087873458862,-0.17114199697971344,0.050508860498666763,-0.20542530715465546,-0.13206352293491364,0.074197858572006226,-0.015554259531199932, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,40 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 0.15652862191200256,0.17514191567897797,0.25638502836227417,0.24087177217006683,-0.066495254635810852,0.093250028789043427,0.12264079600572586,0.0037540879566222429, 0.023792054504156113,0.13065291941165924,0.0026771866250783205,-0.021327139809727669,-0.2197825163602829,0.17841269075870514,0.3024713397026062,-0.34677734971046448, 0.13414792716503143,0.20766304433345795,0.05792076513171196,0.11085845530033112,-0.24172210693359375,-0.030415147542953491,0.29933255910873413,-0.082297869026660919, 
  /* [1][0][][] */ -0.14549487829208374,0.17054618895053864,0.0079047782346606255,0.17716875672340393,-0.0048534893430769444,-0.28803592920303345,-0.20445618033409119,0.23643068969249725, -0.20099709928035736,-0.11413475126028061,-0.11853502690792084,-0.0068584932014346123,0.13631452620029449,0.16354908049106598,0.068461284041404724,0.39671045541763306, 0.23887737095355988,0.0041877529583871365,0.087809100747108459,-0.28183948993682861,-0.17722398042678833,-0.24556566774845123,-0.053404301404953003,0.099060177803039551, 
  /* [2][0][][] */ -0.056117042899131775,0.039163075387477875,-0.10857754200696945,0.0056120669469237328,0.025781156495213509,-0.1620604395866394,-0.11141983419656754,0.24799351394176483, 0.30218440294265747,-0.014922928996384144,0.20860835909843445,0.16089935600757599,0.087655216455459595,-0.27772834897041321,-0.046244088560342789,0.38794022798538208, -0.2083497941493988,0.079465717077255249,0.12837974727153778,-0.18380190432071686,-0.10732472687959671,-0.043542519211769104,0.13028547167778015,0.090233013033866882, 
  /* [3][0][][] */ 0.17053927481174469,-0.17249229550361633,0.13256619870662689,-0.10388955473899841,0.22700268030166626,-0.075458072125911713,-0.31943488121032715,0.27700388431549072, 0.062054406851530075,-0.2290940135717392,-0.061089504510164261,0.22927233576774597,0.01915782131254673,-0.15020325779914856,-0.2353980541229248,0.1958916038274765, -0.16481901705265045,0.014729281887412071,-0.1118893101811409,-0.07910243421792984,0.14872671663761139,-0.081860944628715515,0.088583104312419891,0.26609301567077637, 
  /* [4][0][][] */ -0.018929187208414078,-0.075881019234657288,-0.20846739411354065,-0.058669894933700562,-0.26339107751846313,-0.10811501741409302,0.19966568052768707,-0.020327113568782806, -0.092776656150817871,0.0033082324080169201,-0.14139242470264435,-0.051201976835727692,-0.10357681661844254,0.28598663210868835,0.2569674551486969,-0.16100730001926422, 0.19813631474971771,0.28296291828155518,0.16369819641113281,-0.042563319206237793,-0.17264235019683838,0.3900018036365509,0.065106950700283051,-0.060418378561735153, 
  /* [5][0][][] */ -0.17887364327907562,0.22061589360237122,0.12937751412391663,0.17668868601322174,-0.043246589601039886,-0.21645110845565796,-0.072595849633216858,0.15733209252357483, -0.19846996665000916,0.18504920601844788,-0.1009746789932251,-0.10357449948787689,0.21475525200366974,0.32185131311416626,-0.17301875352859497,-0.16340076923370361, -0.14607301354408264,0.34683012962341309,0.13045857846736908,0.12377966940402985,0.062098007649183273,0.12947697937488556,-0.15690241754055023,0.072489254176616669, 
  /* [6][0][][] */ 0.24998719990253448,-0.056248068809509277,0.11976045370101929,0.18310301005840302,-0.26279032230377197,-0.13451449573040009,-0.040127821266651154,0.18004912137985229, 0.11814511567354202,-0.24545235931873322,0.15393771231174469,-0.23176011443138123,-0.16582401096820831,-0.09518713504076004,0.045182298868894577,0.29867526888847351, -0.071828626096248627,-0.29717272520065308,-0.16393090784549713,0.20250487327575684,-0.085747353732585907,-0.033593159168958664,-0.23359109461307526,-0.10900750011205673, 
  /* [7][0][][] */ -0.034706927835941315,0.30514168739318848,-0.0019514572340995073,-0.2635083794593811,-0.22096832096576691,0.39036467671394348,0.34464460611343384,0.0044117937795817852, 0.13353492319583893,0.28024864196777344,0.20476952195167542,0.25789591670036316,0.27247631549835205,0.3158438503742218,0.1751176118850708,0.038897484540939331, 0.05455813929438591,0.059441305696964264,-0.18029969930648804,-0.031171871349215508,0.21150797605514526,0.20072731375694275,0.33628064393997192,-0.036696817725896835, 
  /* [8][0][][] */ 0.18148086965084076,-0.25330737233161926,0.2511991560459137,0.18875607848167419,0.038299139589071274,-0.12405892461538315,0.10921303927898407,0.29133200645446777, -0.064107745885848999,-0.20584212243556976,-0.21244008839130402,0.18936970829963684,0.17297478020191193,-0.11847718805074692,-0.31243491172790527,0.40093588829040527, -0.042552366852760315,-0.17296293377876282,0.20643135905265808,0.15720900893211365,0.0051476513035595417,0.06112661212682724,-0.14182624220848083,0.062670037150382996, 
  /* [9][0][][] */ 0.10611923784017563,-0.2086687833070755,0.13689793646335602,0.19731608033180237,-0.13673652708530426,0.097585111856460571,0.074185654520988464,0.25467830896377563, -0.096047103404998779,-0.16450940072536469,-0.034126129001379013,-0.17023241519927979,0.061449874192476273,0.055609110742807388,-0.099294818937778473,0.17259247601032257, -0.044506151229143143,-0.21636089682579041,-0.11085421591997147,0.23286572098731995,-0.067786432802677155,0.033104389905929565,-0.12847104668617249,0.35755231976509094, 
  /* [10][0][][] */ -0.16384582221508026,-0.12657143175601959,-0.11262959241867065,0.11832458525896072,0.078376024961471558,-0.11728399991989136,0.055405355989933014,0.030161352828145027, -0.20654763281345367,-0.19996088743209839,-0.067835442721843719,-0.00076960097067058086,-0.23271502554416656,-0.20324580371379852,-0.333992600440979,0.17081055045127869, -0.13853493332862854,-0.021980615332722664,-0.11574593931436539,0.17163760960102081,-0.22751531004905701,0.084222041070461273,-0.15954418480396271,0.38375738263130188, 
  /* [11][0][][] */ -0.34294202923774719,0.0091105690225958824,-0.14342817664146423,0.29891777038574219,0.19271224737167358,0.027039382606744766,-0.20904161036014557,-0.10626470297574997, -0.16192285716533661,-0.23101650178432465,0.095457836985588074,0.076173827052116394,0.11176994442939758,-0.21517665684223175,-0.20217293500900269,0.21367205679416656, -0.1268739253282547,-0.11355088651180267,-0.20687885582447052,0.23107616603374481,-0.26447016000747681,-0.21472959220409393,-0.27448150515556335,0.019607109948992729, 
  /* [12][0][][] */ -0.20063102245330811,0.21463404595851898,-0.21804039180278778,0.29640984535217285,-0.072144016623497009,0.098833918571472168,0.404428631067276,-0.16119220852851868, 0.15245622396469116,0.020729994401335716,-0.24680702388286591,-0.094199635088443756,-0.29899114370346069,0.30283352732658386,-0.18497516214847565,-0.20841240882873535, 0.16728802025318146,0.22622333467006683,0.16223789751529694,0.084030874073505402,0.2083197683095932,-0.16280809044837952,-0.049706596881151199,0.018854722380638123, 
  /* [13][0][][] */ 0.091209113597869873,0.060107827186584473,-0.087335102260112762,-0.00071937328903004527,-0.25703701376914978,0.37669843435287476,0.086765863001346588,-0.2303430438041687, 0.21193227171897888,0.21095791459083557,-0.14871214330196381,0.10270057618618011,-0.22444517910480499,-0.085234411060810089,0.033573869615793228,-0.30760231614112854, -0.061600975692272186,0.1337096095085144,0.24089799821376801,0.093015074729919434,0.32043230533599854,-0.040749974548816681,-0.045024927705526352,0.01888483390212059, 
  /* [14][0][][] */ 0.18513302505016327,0.14062166213989258,0.17612022161483765,-0.0018282991368323565,-0.043708749115467072,0.29134374856948853,0.2100142240524292,-0.26170375943183899, 0.016835380345582962,0.35351383686065674,0.22536613047122955,0.13297738134860992,0.022466745227575302,0.11901134997606277,0.25906306505203247,-0.27742117643356323, 0.27458873391151428,-0.16436874866485596,0.023689640685915947,0.3409574031829834,0.073549926280975342,-0.10532953590154648,0.16083680093288422,-0.31303077936172485, 
  /* [15][0][][] */ 0.20250755548477173,0.14998488128185272,-0.015313321724534035,-0.10398193448781967,0.051801130175590515,-0.14744994044303894,-0.26487016677856445,0.29300698637962341, 0.0071774940006434917,-0.045204613357782364,0.14630080759525299,-0.065614044666290283,-0.018801972270011902,-0.19391830265522003,-0.088390514254570007,0.22048111259937286, -0.10110621899366379,-0.17664279043674469,0.17041842639446259,-0.15202753245830536,-0.29339247941970825,-0.080816194415092468,0.050328843295574188,0.26521214842796326, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) float tensor_data9[2] = { -0.08157842606306076, 0.081578418612480164, };
const TfArray<1, int> tensor_dimension9 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data10[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data11[2*400] = { 
  0.1630881130695343, -0.1762077659368515, -0.01435445249080658, -0.016992872580885887, 0.24034669995307922, -0.026698077097535133, -0.13184146583080292, -0.043584432452917099, -0.065318718552589417, 0.076974116265773773, -0.22509253025054932, -0.228795126080513, -0.046001560986042023, 0.21149665117263794, 0.097877852618694305, -0.13364657759666443, 0.17180658876895905, -0.019195672124624252, -0.034507505595684052, -0.20339570939540863, 0.194168820977211, 0.064375199377536774, -0.11867066472768784, 0.131325364112854, -0.12396568059921265, -0.024008484557271004, 6.965591455809772e-05, -0.099396869540214539, 0.058970384299755096, 0.20348246395587921, 0.020785592496395111, -0.093020126223564148, 0.027110567316412926, 0.050781905651092529, -0.024596929550170898, -0.17876534163951874, 0.00046567624667659402, -0.10107650607824326, -0.103252112865448, 0.15880440175533295, -0.040791135281324387, 0.096204712986946106, -0.21286468207836151, -0.065740033984184265, -0.03623151034116745, 0.21980445086956024, 0.13279329240322113, -0.21820367872714996, 0.060453951358795166, -0.16355010867118835, -0.0456869937479496, -0.24749116599559784, 0.20588564872741699, -0.076808199286460876, -0.042913943529129028, 0.073455549776554108, -0.20382143557071686, -0.12951229512691498, -0.042266722768545151, -0.097707569599151611, -0.017578026279807091, 0.10845989733934402, 0.058096613734960556, -0.11465366929769516, 0.056526005268096924, -0.13929365575313568, -0.028465885668992996, -0.083682321012020111, 0.040132440626621246, 0.096193894743919373, -0.14801907539367676, 0.12080252170562744, -0.043341193348169327, -0.018901752308011055, -0.10287033021450043, -0.20129953324794769, 0.065282285213470459, 0.09871334582567215, 0.10435555875301361, -0.14572852849960327, 0.053468566387891769, -0.077135473489761353, -0.17755317687988281, -0.1664375513792038, 0.1364496648311615, 0.029330022633075714, -0.12355585396289825, 0.14883846044540405, 0.013469606637954712, -0.04958382248878479, -0.10741505771875381, -0.079646430909633636, 0.13366636633872986, 0.08366798609495163, 0.036698218435049057, -0.15706992149353027, 0.075466975569725037, 0.0009817788377404213, -0.04314691573381424, -0.17072631418704987, 0.1598588228225708, 0.04540669173002243, -0.1945674866437912, 0.055270705372095108, -0.053668484091758728, 0.0023058794904500246, -0.12738251686096191, -0.048824038356542587, -0.052333660423755646, 0.043572254478931427, 0.17187336087226868, -0.29230806231498718, -0.04228583350777626, 0.019850976765155792, -0.17775511741638184, -0.041371416300535202, 0.167530357837677, 0.086103282868862152, -0.19268105924129486, -0.047627359628677368, -0.089984409511089325, -0.093539707362651825, -0.094433017075061798, -0.013245035894215107, 0.16824427247047424, 0.10534442216157913, 0.22224971652030945, -0.28110679984092712, 0.11679227650165558, -0.018662715330719948, -0.19886688888072968, -0.067644037306308746, 0.035852856934070587, 0.037798210978507996, -0.11420222371816635, 0.052879467606544495, -0.17947758734226227, 0.034361589699983597, -0.079004645347595215, -0.086578503251075745, 0.18048135936260223, 0.20798487961292267, 0.086873017251491547, -0.18698638677597046, 0.036692392081022263, -0.16616584360599518, -0.13761724531650543, -0.09916580468416214, 0.12547501921653748, 0.13248614966869354, -0.17332199215888977, 0.066021531820297241, -0.16719622910022736, -0.060986828058958054, -0.11046236008405685, -0.18102936446666718, 0.10940558463335037, 0.26179695129394531, 0.058697689324617386, -0.19771003723144531, -0.038372345268726349, -0.082271844148635864, -0.10053598135709763, -0.1753576248884201, 0.08610592782497406, -0.0034591355361044407, -0.044557984918355942, 0.17426121234893799, -0.026945102959871292, -0.11714581400156021, -0.15256573259830475, -0.12003345042467117, 0.1897377222776413, 0.23769316077232361, 0.17659455537796021, -0.28231698274612427, 0.088026538491249084, -0.13716448843479156, 0.020665716379880905, -0.086725391447544098, 0.19342784583568573, 0.098704859614372253, -0.056917149573564529, 0.11033535003662109, -0.047521103173494339, -0.14170496165752411, -0.21288037300109863, -0.22107373178005219, 0.088936656713485718, 0.24654512107372284, 0.032624252140522003, -0.30298969149589539, 0.15133999288082123, -0.033868413418531418, -0.021529883146286011, -0.21412190794944763, 0.10561059415340424, 0.018190501257777214, 0.015047258697450161, 0.1345362514257431, -0.083166427910327911, -0.038216833025217056, -0.021880753338336945, -0.24044111371040344, 0.15426430106163025, 0.057904858142137527, 0.047734204679727554, -0.093188278377056122, -0.034097731113433838, -0.050466064363718033, -0.11825215071439743, -0.01873580738902092, 0.029876254498958588, 0.041813608258962631, -0.1121564581990242, 0.080277025699615479, -0.087692819535732269, -0.060006313025951385, -0.083440102636814117, -0.19582334160804749, 0.17202529311180115, 0.16947475075721741, 0.21003153920173645, -0.15098151564598083, 0.091675832867622375, 0.038990207016468048, 0.022669658064842224, -0.1946403980255127, 0.085660733282566071, -0.037315096706151962, -0.10045810043811798, 0.066899962723255157, 0.010934781283140182, -0.025121958926320076, 0.011876720935106277, -0.20463636517524719, 0.066564634442329407, 0.24381421506404877, 0.083538241684436798, -0.080398328602313995, 0.18108455836772919, -0.019969936460256577, -0.025496678426861763, -0.25776618719100952, 0.16529335081577301, 0.063780829310417175, -0.11007905751466751, 0.020560035482048988, -0.11036231368780136, -0.0030255534220486879, -0.1058620885014534, -0.16768729686737061, 0.080284275114536285, 0.21289569139480591, 0.1819564551115036, -0.21076926589012146, 0.059301145374774933, -0.0073057143017649651, -0.034182209521532059, -0.17771975696086884, 0.015721049159765244, 0.12116481363773346, -0.22908195853233337, 0.049485549330711365, -0.1510821133852005, 0.041535660624504089, -0.19140323996543884, -0.0099466200917959213, 0.15591932833194733, 0.22514486312866211, 0.24201202392578125, -0.2474873811006546, 0.16270396113395691, -0.13000012934207916, -0.039065070450305939, -0.16619449853897095, 0.13409765064716339, -0.027572378516197205, -0.064647622406482697, 0.072354264557361603, -0.079597651958465576, -0.14069060981273651, -0.24175544083118439, -0.024833986535668373, 0.10650663822889328, 0.19741679728031158, 0.1864776611328125, -0.060423076152801514, 0.14874616265296936, 0.026550965383648872, -0.16760678589344025, -0.1858144998550415, 0.18243789672851562, -0.018351826816797256, -0.059696581214666367, 0.18244810402393341, -0.14836601912975311, -0.0067525813356041908, -0.031899694353342056, -0.013282504864037037, 0.0463421531021595, 0.20072682201862335, 0.050644274801015854, -0.11088360846042633, 0.066046319901943207, -0.029072275385260582, 0.021073261275887489, -0.16948835551738739, 0.12902991473674774, 0.097850941121578217, -0.14997650682926178, 0.028491847217082977, -0.10894743353128433, -0.10991990566253662, -0.22551105916500092, -0.1833391934633255, 0.18363386392593384, 0.16898013651371002, 0.25067803263664246, -0.25074291229248047, -0.0014077794039621949, -0.18914066255092621, -0.051841255277395248, -0.17799901962280273, 0.22813734412193298, 0.066215075552463531, -0.009373360313475132, 0.07814914733171463, -0.13400042057037354, -0.0099405935034155846, -0.12897083163261414, 0.0061311353929340839, 0.12884081900119781, 0.19665917754173279, 0.1321101039648056, -0.094225138425827026, -0.051518168300390244, -0.1034846156835556, -0.0095283426344394684, -0.12239256501197815, 0.1771368533372879, 0.11672864109277725, -0.043722458183765411, -0.047916151583194733, -0.10040313005447388, 0.012004182673990726, -0.19933871924877167, -0.19299425184726715, 0.16090182960033417, 0.24595825374126434, 0.13289570808410645, -0.19270741939544678, 0.18998913466930389, 0.0098409783095121384, -0.099244639277458191, -0.19609302282333374, 0.01267658919095993, -0.089492581784725189, -0.16788634657859802, -0.0023933276534080505, -0.084772884845733643, -0.028395555913448334, -0.077918499708175659, -0.22672644257545471, -0.048311229795217514, 0.27222138643264771, 0.22972330451011658, -0.15368615090847015, 0.024916026741266251, -0.14392638206481934, -0.067051701247692108, -0.051544874906539917, 0.081044241786003113, 0.12940298020839691, -0.20699216425418854, 0.009685952216386795, -0.014266489073634148, 0.08472742885351181, -0.029346928000450134, -0.12368567287921906, 0.054705783724784851, 0.11921530216932297, 0.080861754715442657, -0.28862118721008301, 0.079635046422481537, -0.12030071765184402, -0.15015850961208344, -0.051267743110656738, 0.072380505502223969, 0.015751609578728676, -0.20353135466575623, 0.14640842378139496, -0.19371359050273895, 0.0030860230326652527, -0.54405033588409424, -0.05286029726266861, -0.038291633129119873, 0.1127113476395607, 0.16418908536434174, -0.049497049301862717, 
  -0.025494230911135674, 0.091808140277862549, 0.06204112246632576, 0.097760163247585297, -0.21399387717247009, -0.050383761525154114, -0.02386629581451416, -0.0062476098537445068, -0.016228562220931053, 0.043212894350290298, 0.031753744930028915, 0.079724885523319244, -0.062392514199018478, -0.013929554261267185, -0.089958034455776215, 0.16203974187374115, -0.096037507057189941, -0.014510206878185272, 0.10520559549331665, 0.017353110015392303, -0.045858446508646011, -0.041245520114898682, 0.13702301681041718, -0.03179410845041275, 0.14520804584026337, -0.084068998694419861, 0.085171572864055634, 0.048421308398246765, -0.016580592840909958, -0.056829851120710373, -0.068439140915870667, 0.30527171492576599, 0.013993924483656883, 0.080228634178638458, 0.10480967164039612, 0.03595665842294693, -0.067198097705841064, -0.11807547509670258, 0.21493786573410034, 0.030150311067700386, -0.010369704104959965, 0.092948757112026215, 0.094563908874988556, 0.054177302867174149, -0.027243351563811302, -0.095218800008296967, -0.24026119709014893, 0.18010501563549042, 0.043279979377985001, 0.08687310665845871, 0.091556824743747711, 0.063986994326114655, -0.1592831164598465, 0.058346405625343323, 0.20832006633281708, -0.18160729110240936, 0.1422625333070755, -0.069261759519577026, 0.21371971070766449, 0.18958756327629089, -0.026730470359325409, -0.18861433863639832, -0.20997825264930725, 0.071026816964149475, -0.025207811966538429, 0.17254206538200378, 0.033358275890350342, 0.10299517959356308, -0.087816126644611359, -0.060390464961528778, 0.030958572402596474, -0.13785713911056519, 0.088079944252967834, 0.037354934960603714, -0.002768021309748292, 0.066951736807823181, -0.16817916929721832, -0.11938606947660446, -0.089804597198963165, 0.10693348199129105, -0.11915551126003265, 0.037377171218395233, 0.12067358195781708, 0.17982859909534454, -0.14815014600753784, -0.11829634010791779, 0.21489182114601135, -0.15355537831783295, -0.052391614764928818, 0.06943802535533905, 0.16454771161079407, 0.12724259495735168, -0.16020767390727997, -0.16031774878501892, -0.20997758209705353, 0.18192112445831299, 0.04063989594578743, 0.11832733452320099, 0.20407576858997345, 0.15885573625564575, -0.022156409919261932, -0.019649283960461617, 0.20551742613315582, 0.017925860360264778, -0.019226962700486183, 0.10975208133459091, -0.0043691182509064674, 0.13324476778507233, -0.065078429877758026, -0.096979416906833649, -0.19019956886768341, 0.20351064205169678, 0.018827479332685471, 0.092540256679058075, 0.13402570784091949, 0.15973629057407379, -0.01282088365405798, -0.11278819292783737, 0.19528625905513763, -0.1735442578792572, 0.0012330298777669668, -0.093359522521495819, 0.10506027936935425, 0.082661524415016174, -0.053752053529024124, -0.23605230450630188, -0.048172805458307266, 0.14911572635173798, -0.17534913122653961, 0.071935087442398071, 0.10256855189800262, 0.14268593490123749, -0.019352290779352188, 0.065037459135055542, 0.22776852548122406, -0.1350477933883667, 0.05250316858291626, -0.0065937032923102379, 0.06380731612443924, 0.18532797694206238, -0.042105693370103836, -0.18936616182327271, -0.20313672721385956, 0.24212995171546936, -0.13840973377227783, 0.054783158004283905, 0.080208361148834229, 0.2270190566778183, -0.070937007665634155, 0.040022343397140503, 0.021065378561615944, 0.030587747693061829, 0.20079343020915985, -0.07475946843624115, 0.19855387508869171, 0.13104748725891113, -0.090711161494255066, -0.22689326107501984, -0.1703188419342041, 0.080755218863487244, -0.061217322945594788, 0.055537011474370956, 0.063060358166694641, 0.22963269054889679, -0.1757224053144455, -0.092116780579090118, 0.13904386758804321, 0.012934337370097637, -0.030278971418738365, 0.1385679692029953, 0.010268695652484894, 0.19149859249591827, -0.1777804046869278, -0.27009332180023193, -0.071872949600219727, 0.23252733051776886, 0.059566732496023178, 0.11362222582101822, 0.13433030247688293, 0.15271598100662231, -0.13606196641921997, -0.089169986546039581, 0.028234543278813362, -0.15285088121891022, -0.018560035154223442, -0.061445731669664383, 0.16356505453586578, 0.11761584132909775, -0.12291010469198227, -0.20169709622859955, -0.21153755486011505, 0.088554166257381439, -0.15631365776062012, 0.020106518641114235, 0.10668763518333435, 0.066523365676403046, 0.015457837842404842, -0.0692325159907341, 0.02269991859793663, -0.18082843720912933, 0.034329731017351151, -0.014862571842968464, 0.082721114158630371, 0.096942730247974396, -0.136252760887146, -0.24158768355846405, -0.12878355383872986, 0.092571474611759186, -0.059247709810733795, 0.1005842387676239, 0.20346425473690033, 0.18588767945766449, -0.15423436462879181, 0.034137167036533356, 0.016263006255030632, -0.11076445877552032, -0.020177273079752922, 0.11647126823663712, 0.035269718617200851, 0.23595353960990906, -0.035064060240983963, -0.035875424742698669, -0.17950393259525299, 0.15146186947822571, -0.068980611860752106, 0.07252231240272522, 0.026044247671961784, 0.023348476737737656, -0.1452396959066391, -0.12808643281459808, 0.23320549726486206, -0.12603408098220825, 0.047262173146009445, 0.008496028371155262, -0.0057856114581227303, -0.010062726214528084, -0.078800350427627563, -0.19696827232837677, -0.18104566633701324, 0.13366666436195374, -0.059956852346658707, 0.0062143197283148766, 0.13711158931255341, 0.12354414910078049, -0.003876569215208292, -0.0098889563232660294, 0.15975026786327362, -0.038617786020040512, 0.11942385882139206, 0.11770462989807129, 0.10227852314710617, 0.080166779458522797, -0.16749143600463867, -0.13289287686347961, -0.25066325068473816, 0.069995447993278503, -0.04220908135175705, 0.090027309954166412, 0.1675228625535965, 0.13688032329082489, -0.18568934500217438, 0.043721817433834076, 0.11813350766897202, -0.0098027931526303291, 0.1451738029718399, -0.0066124363802373409, 0.0283818319439888, 0.12077468633651733, -0.011306432075798512, -0.14646381139755249, -0.19441606104373932, 0.078529611229896545, -0.11617745459079742, 0.16186118125915527, 0.10462671518325806, 0.22901351749897003, -0.11159620434045792, 0.035633396357297897, 0.045514322817325592, -0.029665607959032059, 0.062566004693508148, 0.092382445931434631, 0.067764677107334137, 0.11440705507993698, -0.043752707540988922, -0.17783163487911224, -0.17679776251316071, 0.22442427277565002, -0.083973236382007599, 0.19130735099315643, 0.070599935948848724, 0.09257323294878006, -0.061978418380022049, -0.046306498348712921, 0.2411641925573349, -0.046945933252573013, 0.15048509836196899, -0.0049892649985849857, 0.23994527757167816, 0.21494898200035095, -0.12303828448057175, -0.043144848197698593, -0.071300581097602844, 0.20342713594436646, -0.08788694441318512, 0.08639247715473175, 0.047282986342906952, 0.062460396438837051, -0.10341259837150574, 0.01064025703817606, 0.18304795026779175, -0.13054729998111725, 0.17998673021793365, -0.088076122105121613, 0.10115591436624527, 0.011473981663584709, 0.051240961998701096, -0.24945442378520966, -0.15154820680618286, 0.10054000467061996, 0.045861504971981049, -0.04264884814620018, 0.11957075446844101, 0.055476531386375427, -0.14691314101219177, -0.0089621990919113159, 0.069128885865211487, -0.10340709239244461, 0.072805166244506836, 0.048956599086523056, 0.09870447963476181, 0.069168537855148315, -0.017565911635756493, -0.19347447156906128, -0.093608342111110687, 0.14978212118148804, -0.14503580331802368, 0.092374615371227264, 0.079827003180980682, 0.13356344401836395, -0.027676757425069809, -0.087877295911312103, 0.1031680628657341, -0.071931645274162292, 0.076426520943641663, 0.11696527898311615, 0.10076997429132462, 0.044765569269657135, 0.053831342607736588, -0.065700523555278778, -0.22160571813583374, 0.1845211386680603, -0.065455727279186249, 0.17649194598197937, 0.1947379857301712, 0.20669731497764587, -0.1043112501502037, 0.062852859497070312, 0.11244364082813263, -0.043709903955459595, 0.063083276152610779, 0.10915097594261169, 0.23609139025211334, 0.1913502961397171, -0.079023241996765137, -0.18777209520339966, -0.12854668498039246, 0.094182513654232025, -0.024261407554149628, 0.14561329782009125, 0.18301622569561005, 0.034882679581642151, -0.18298622965812683, -0.04776589572429657, 0.22104093432426453, 0.014383088797330856, 0.18086238205432892, 0.094826586544513702, 0.23962348699569702, 0.21407002210617065, -0.16639329493045807, -0.22893801331520081, -0.094514749944210052, 0.22393390536308289, 0.009204457513988018, 0.014416348189115524, 0.13395434617996216, 0.016500320285558701, 0.079831741750240326, -0.031590010970830917, 0.0037105525843799114, -0.1545865535736084, 0.17454974353313446, 0.0088321231305599213, 0.45885276794433594, 0.18791273236274719, -0.035449385643005371, -0.088638372719287872, -0.03431527316570282, 0.04287511482834816, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 2,400 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,98,40 } };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,98,8 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,98,1,8 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,49,1,8 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,49,8 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,49,16 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,49,1,16 } };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,3 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,7,1 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,4 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,5 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,2 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,6 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,10 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,11,9 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 15680), (TfLiteIntArray*)&g0::tensor_dimension0, 15680, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 64, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 3840, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 8, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 8, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 3200, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 15680, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 15680), (TfLiteIntArray*)&g0::tensor_dimension13, 3136, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 3136, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 3136), (TfLiteIntArray*)&g0::tensor_dimension15, 1568, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 1568, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 3136), (TfLiteIntArray*)&g0::tensor_dimension17, 3136, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 3136, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 3136), (TfLiteIntArray*)&g0::tensor_dimension19, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension21, 8, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 8, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
